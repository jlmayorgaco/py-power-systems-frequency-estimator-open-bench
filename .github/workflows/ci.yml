name: CI

on:
  push:
    branches: [] #main, develop, "**/feature/**", "**/fix/**" 
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_INPUT: "1"
  FORCE_COLOR: "1"
  PYTHONDONTWRITEBYTECODE: "1"

# -------------------------------
# Reusable step: install deps
# -------------------------------
# This uses pip and tries (in order):
# - requirements-dev.txt
# - requirements.txt
# - editable install if pyproject.toml/setup.cfg/setup.py exists
# It also installs extra tools on-demand per job.
defaults:
  run:
    shell: bash

jobs:
  # ---------------------------
  # Lint: ruff (single version)
  # ---------------------------
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install project + ruff
        run: |
          python -m pip install -U pip wheel
          if [[ -f requirements-dev.txt ]]; then
            python -m pip install -r requirements-dev.txt
          elif [[ -f requirements.txt ]]; then
            python -m pip install -r requirements.txt
          fi
          if [[ -f pyproject.toml || -f setup.cfg || -f setup.py ]]; then
            python -m pip install -e .
          fi
          python -m pip install "ruff>=0.6"

      - name: Ruff format check
        run: ruff format --check .

      - name: Ruff lint
        run: ruff check .

  # ---------------------------
  # Type: mypy (matrix)
  # ---------------------------
  type:
    name: Type check (mypy ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/*.py', 'pyproject.toml', 'mypy.ini', 'setup.cfg') }}
          restore-keys: |
            mypy-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install project + mypy
        run: |
          python -m pip install -U pip wheel
          if [[ -f requirements-dev.txt ]]; then
            python -m pip install -r requirements-dev.txt
          elif [[ -f requirements.txt ]]; then
            python -m pip install -r requirements.txt
          fi
          if [[ -f pyproject.toml || -f setup.cfg || -f setup.py ]]; then
            python -m pip install -e .
          fi
          python -m pip install "mypy>=1.10" typing-extensions

      - name: mypy
        run: |
          if [[ -f mypy.ini || -f setup.cfg || -f pyproject.toml ]]; then
            mypy .
          else
            # Default strict-ish if no config found
            mypy --ignore-missing-imports .
          fi

  # ---------------------------
  # Test: pytest (matrix)
  # ---------------------------
  test:
    name: Tests (pytest ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install project + test deps
        run: |
          python -m pip install -U pip wheel
          # Try dev/standard requirements if they exist
          if [[ -f requirements-dev.txt ]]; then
            python -m pip install -r requirements-dev.txt
          elif [[ -f requirements.txt ]]; then
            python -m pip install -r requirements.txt
          fi
          # Ensure pytest & coverage exist
          python -m pip install "pytest>=7.4" "pytest-cov>=4.1"
          # Editable project (if present)
          if [[ -f pyproject.toml || -f setup.cfg || -f setup.py ]]; then
            python -m pip install -e .
          fi

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov --cov-report=xml --cov-report=term

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------
  # Docs build (single version)
  # ---------------------------
  docs:
    name: Docs build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [type, test]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install doc deps
        run: |
          python -m pip install -U pip wheel
          # Project install
          if [[ -f requirements-dev.txt ]]; then
            python -m pip install -r requirements-dev.txt
          elif [[ -f requirements.txt ]]; then
            python -m pip install -r requirements.txt
          fi
          if [[ -f pyproject.toml || -f setup.cfg || -f setup.py ]]; then
            python -m pip install -e .
          fi
          # Try MkDocs first; fall back to Sphinx if no mkdocs.yml
          if [[ -f mkdocs.yml ]]; then
            python -m pip install "mkdocs>=1.5" "mkdocs-material>=9.5" mkdocs-autorefs mkdocs-gen-files mkdocs-literate-nav mkdocs-section-index
          else
            python -m pip install "sphinx>=7.0" "furo>=2024.1" sphinx-autodoc-typehints
          fi

      - name: Build docs (MkDocs or Sphinx)
        run: |
          set -e
          if [[ -f mkdocs.yml ]]; then
            mkdocs build --strict
            echo "site" > docs_artifact_path.txt
          elif [[ -d docs ]]; then
            # Common Sphinx layouts: docs/ or docs/source/
            SRC="docs/source"
            [[ -d "$SRC" ]] || SRC="docs"
            OUT="docs/_build/html"
            sphinx-build -b html "$SRC" "$OUT" -W --keep-going
            echo "$OUT" > docs_artifact_path.txt
          else
            echo "No docs configuration found (mkdocs.yml or docs/)."
            exit 1
          fi

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: ${{ steps.build-docs.outputs.path }}
        if: false  # placeholder; next step sets path dynamically

      - name: Upload docs artifact (dynamic path)
        run: |
          path="$(cat docs_artifact_path.txt)"
          echo "Uploading docs from: $path"
        # Use the CLI uploader so we can pass dynamic path
      - uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: ${{ github.workspace }}/$(cat docs_artifact_path.txt)
          retention-days: 7

  # Gate: require all jobs on PRs
  # (GitHub branch protection should also enforce this.)
