# pyproject.toml
[project]
name = "openfreqbench"
version = "0.0.1"
description = "Open Benchmark of Power-System Frequency Estimators"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [{ name = "Jorge Luis Mayorga Taborda" }]

# Core runtime deps (keep minimal; estimators/scenarios can be extras)
dependencies = [
  "numpy>=1.26",
  "scipy>=1.11",
  "pandas>=2.2",
]

# Optional groups for dev and features
[project.optional-dependencies]
dev = [
  "ruff>=0.6",
  "mypy>=1.10",
  "pytest>=8.3",
  "pytest-cov>=5.0",
  # docs (choose one stack or both; mkdocs recommended)
  "mkdocs>=1.5",
  "mkdocs-material>=9.5",
  "sphinx>=7.0",
  "furo>=2024.1",
  "sphinx-autodoc-typehints",
  # typing backfill for py<3.12
  "typing-extensions; python_version<'3.12'",
]
opendss = ["opendssdirect.py>=0.8"]
viz = [
  "matplotlib>=3.8",
  "plotnine>=0.13",      # ggplot-like; optional
]
notebooks = [
  "jupyterlab>=4.2",
  "ipykernel>=6.29",
]

# Nice metadata for PyPI and repo
[project.urls]
Homepage = "https://github.com/jlmayorgaco/py-power-systems-frequency-estimator-open-bench"
Issues   = "https://github.com/jlmayorgaco/py-power-systems-frequency-estimator-open-bench/issues"
Docs     = "https://jlmayorgaco.github.io/py-power-systems-frequency-estimator-open-bench/"

# CLI entry points (adjust to your actual modules)
[project.scripts]
ofb-run   = "pipelines.run_benchmark:main"
ofb-eval  = "evaluation.cli:main"
ofb-demos = "pipelines.demos:main"

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

# --- setuptools discovery ---
# If you use a flat layout, this finds packages containing __init__.py.
# If you switch to "src/" layout, replace with:
#   [tool.setuptools.packages.find]
#   where = ["src"]
#   include = ["openfreqbench*", "estimators*", "scenarios*", "evaluation*", "pipelines*"]
[tool.setuptools]
packages = { find = { include = [
  "openfreqbench*", "estimators*", "scenarios*", "evaluation*", "pipelines*", "tests*"
]}}

[tool.setuptools.package-data]
# Example: if later you add YAML/JSON resources inside packages
# "scenarios" = ["**/*.yml", "**/*.yaml"]
# "openfreqbench" = ["py.typed"]

# --- Testing ---
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
addopts = "-q --maxfail=1"
cache_dir = ".ofb/.pytest_cache"

# --- Ruff (lint + format) ---
[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = ["docs/_build", ".ofb"]

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B"]
ignore = ["E203"]           # keep if you prefer Black-style slicing

[tool.ruff.format]
# (accept defaults; add options if you want)

# --- Mypy ---
[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_defs = true
no_implicit_optional = true

# --- Coverage (optional but handy) ---
[tool.coverage.run]
branch = true
source = ["estimators", "scenarios", "evaluation", "pipelines", "openfreqbench"]

[tool.coverage.report]
show_missing = true
skip_covered = true
